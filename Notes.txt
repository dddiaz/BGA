# Start all images in the background
docker-compose up -d

Access the Chronograf inteface, http://localhost:10000
You will need to add the InfluxDB server. Use these settings:
NOTE: HOST IS NOT LOCAL HOST, IT IS INFLUXDB!
Host: influxdb
Port: 8086
No auth or SSL.

Issues:
https://hub.docker.com/r/rapport/influxdb/builds/bbvb6orzogfcnkqzpxgwedc/

CLI:
docker-compose run influxdb-cli
DB Admin Page
http://localhost:8083/
Chronograf:
http://localhost:10000

The only links that matter:
https://www.influxdata.com/how-to-create-iot-influxdb-google-cloud-platform-part-3/
https://github.com/influxdata/telegraf/tree/master/plugins/inputs/mongodb
https://docs.influxdata.com/influxdb/v1.0/tools/api_client_libraries/
https://github.com/influxdata/influxdb-python

http://containertutorials.com/docker-compose/flask-compose.html


TODO:
Connect flask app to mongo db
create api to get latest bg rating
dont forget to add settings.ini file and dont include in source control

add api to telgraf with input being json webservice and output to influxdb

make sure influxdb starts up with ng database? can telegraf handle that?

kinda wanna model:
http://containertutorials.com/docker-compose/nginx-flask-postgresql.html




[[inputs.httpjson]]
  name = "mycollector"
  servers = [
    "http://0.0.0.0:5000/lastbg"
  ]

  # HTTP method to use (case-sensitive)
  method = "GET"
  # Set response_timeout (default 5 seconds)
  # response_timeout = "5s"


CHRONGRAF SETUP
OK to get it working i used

docker-compose run influxdb-cli
to get into cli and look at measurements
then
show databases
to the the dbs
then use telgraf
then show measurements
system should be in there cause its an input

then on chrongraf just say filter by system
and use load1


note Measurements – these are your metrics. We’re using Telegraf in these examples, a plugin-driven server agent for reporting metrics into InfluxDB. It can track system metrics like cpu and disk usage, as well as services like Redis and ElasticSearch.
Tags – key/value pairs used to provide metadata (e.g. region=us-west, host=server01).

#attatch to a running container
sudo docker exec -i -t db0c4bcc29cd  /bin/bash

docker exec -it <containerIdOrName> bash
exit


#######
maybe look into a cross origin resource request issue
still not sure why api cant be called from another container

# to remote into terminal
sudo docker exec -i -t 665b4a1e17b6 /bin/bash

# to get ip addr of container
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' bgatick_web_1
https://docs.docker.com/engine/tutorials/usingdocker/




https://docs.docker.com/engine/tutorials/usingdocker/
################
Supper Important note!
0.0.0.0:5000 does not work for flask api
need to set up telgraf with actual ip addrs
use:
docker inspect nostalgic_morse
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' bgatick_web_1
Currently returns: 172.18.0.3:5000
################
